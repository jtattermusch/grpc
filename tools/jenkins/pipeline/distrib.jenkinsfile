/*
 *
 * Copyright 2015, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
 
/* Build artifacts - build packages - run distrib tests Jenkins pipeline */

// wipe out repo and clone recursively with submodules
def checkout_clean_recursive() {
  checkout([$class: 'GitSCM',
            branches: [[name: "${env.branch_specifier}"]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [[$class: 'SubmoduleOption',
                          disableSubmodules: false,
                          parentCredentials: false,
                          recursiveSubmodules: true,
                          reference: '',
                          trackingSubmodules: false], [$class: 'WipeWorkspace']],
            submoduleCfg: [],
            userRemoteConfigs: [[url: "${env.repository_url}"]]])
}

// Build artifacts on all platforms first.
parallel(
  'build_artifacts_linux' : {
    node('artifact_linux') {
      checkout_clean_recursive()

      // build all linux artifacts
      sh 'python tools/run_tests/task_runner.py -f artifact linux'

      // save artifacts for later use
      sh 'ls -R artifacts'
      stash includes: 'artifacts/**', name: 'linux_artifact_files'
    }
  },
  'build_artifacts_macos' : {
    node('macos') {
      checkout_clean_recursive()

      // TODO(jtattermusch): path for macos nodes in broken when using pipeline
      withEnv(['PATH=/Users/jenkins/.nvm/versions/node/v4.8.2/bin:/opt/local/bin:/opt/local/sbin:/usr/local/rvm/gems/ruby-2.4.0/bin:/usr/local/rvm/gems/ruby-2.4.0@global/bin:/usr/local/rvm/rubies/ruby-2.4.0/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/share/dotnet:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/usr/local/rvm/bin']) {
        sh 'python tools/run_tests/task_runner.py -f artifact macos'
      }

      // save artifacts for later use
      sh 'ls -R artifacts'
      stash includes: 'artifacts/**', name: 'macos_artifact_files'
    }
  },
  'build_artifacts_windows' : {
    node('windows') {
      checkout_clean_recursive()

      sh 'python tools/run_tests/task_runner.py -f artifact windows'

      // save artifacts for later use
      sh 'ls -R artifacts'
      stash includes: 'artifacts/**', name: 'windows_artifact_files'
    }
  }
)